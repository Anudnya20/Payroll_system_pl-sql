--Payroll system by using PL/SQL

SET SERVEROUTPUT ON;
--step 1:
--Creating required tables 
-- Inserting the values
-- MASTER TABLE 
DROP TABLE S_DEPT;

CREATE TABLE S_DEPT
(
DEPT_ID NUMBER(2,0) PRIMARY KEY,
DEPT_NAME VARCHAR2(36)NOT NULL,
DEPT_STARTDATE DATE,
DEPT_ENDDATE DATE,
STATUS VARCHAR2(5)NOT NULL --DEPARTMENT(ACTIVE/INACTIVE)
);

DROP TABLE S_JOB;
CREATE TABLE S_JOB
(
JOB_ID NUMBER(2,0)PRIMARY KEY ,
JOB_NAME VARCHAR2(36) NOT NULL ,
JOB_STARTDATE DATE ,
JOB_ENDDATE DATE ,
STATUS VARCHAR2(5) NOT NULL -- JOB(ACTIVE/INACTIVE)
);

DROP TABLE S_GRADE;
CREATE TABLE S_GRADE
(
GRADE_ID NUMBER(2,0)PRIMARY KEY,
GRADE_NAME VARCHAR2(99)NOT NULL,
GRADE_STARTDATE DATE,
GRADE_ENDDATE DATE,
STATUS VARCHAR2(5)NOT NULL --GRADE(ACTIVE/INACTIVE)
);


DROP TABLE S_WORK_LOC;
CREATE TABLE S_WORK_LOC
(
LOC_ID NUMBER(2,0)PRIMARY KEY,
LOC_NAME VARCHAR2(99)NOT NULL,
POSTAL_CODE NUMBER(6,0),
CITY VARCHAR2(99),
STATUS VARCHAR2(5)NOT NULL,
COUNTRY VARCHAR2(99)
);

----FILL THE DATA FIRST IN THE MASTER TABLES------------------------------------------------------------------------------------

INSERT INTO S_DEPT VALUES (1,'MARKETING','01-01-1985',NULL,'A');
INSERT INTO S_DEPT VALUES (2,'OPERATIONS','01-01-1985',NULL,'A');
INSERT INTO S_DEPT VALUES (3,'FINANCE','01-01-1985',NULL,'A');
INSERT INTO S_DEPT VALUES (4,'SALES','01-01-1985',NULL,'A');
INSERT INTO S_DEPT VALUES (5,'HR','01-01-1985',NULL,'A');


INSERT INTO S_JOB VALUES (1,'CEO','01-06-1985',NULL,'A');
INSERT INTO S_JOB VALUES (2,'CSO','01-06-1985',NULL,'A');
INSERT INTO S_JOB VALUES (3,'PRODUCT_MANAGER','01-06-1985',NULL,'A');
INSERT INTO S_JOB VALUES (4,'ENGINEER_MANAGER','01-06-1985',NULL,'A');
INSERT INTO S_JOB VALUES (5,'SOFTWARE_DEVELOPER','01-06-1985',NULL,'A');
INSERT INTO S_JOB VALUES (6,'JUNIOR_SOFT_DEVELOPER','01-06-1985',NULL,'A');
INSERT INTO S_JOB VALUES (7,'INTERN','01-06-1985',NULL,'A');
INSERT INTO S_JOB VALUES (8,'CONSULTANT','01-06-1985',NULL,'A');

INSERT INTO S_GRADE VALUES (1, 'CEO,CSO','01-07-1985' , NULL , 'A');
INSERT INTO S_GRADE VALUES (2, 'PRODUCT_MANAGER,ENGINERR_MANAGER','01-07-1985', NULL , 'A');
INSERT INTO S_GRADE VALUES (3, 'SOFTWARE_DEVELOPER,JUNIOR_SOFT_DEVELOPER' , '01-07-1985', NULL, 'A');
INSERT INTO S_GRADE VALUES (4, 'INTERN, CONSULTANT' , '01-07-1985' , NULL , 'A' );


INSERT INTO S_WORK_LOC VALUES (1,'GHATKOPAR','400086','MUMBAI','A','INDIA');
INSERT INTO S_WORK_LOC VALUES (2,'ANTOP_HILL','400037','MUMBAI','A','INDIA');
INSERT INTO S_WORK_LOC VALUES (3,'DADAR','400014','MUMBAI','A','INDIA');


-------------------------------------------------------------------------------------------------------------------------------
--TRANSACTION LEVEL TABLE -TO IDENTIFY EMPLOYEE

-- DATA WHICH WILL NOT CHANGE
-- 1 EMPLOYEE, 1 ENTRY IN DETAILS_EMP1
-- USING SEQUENCE IN INSERT

CREATE TABLE DETAILS_EMP1
(
EMP_ID NUMBER(2,0)PRIMARY KEY,
FIRST_NAME VARCHAR2(36) NOT NULL,
LAST_NAME VARCHAR2(36) NOT NULL,
DOB DATE, 
HIRE_DATE DATE DEFAULT SYSDATE,
PHONE_NO NUMBER(12,0),
EMAIL_ID VARCHAR2(36)
);

DROP TABLE DETAILS_EMP1;

SELECT * FROM DETAILS_EMP1;

CREATE SEQUENCE EMP_ID_SEQ
START WITH 1
MINVALUE 1
INCREMENT BY 1;
DROP SEQUENCE EMP_ID_SEQ;

INSERT INTO DETAILS_EMP1 VALUES (EMP_ID_SEQ.NEXTVAL,'AISHWARYA','PATIL','26-JAN-1988','30-JUN-2013',919225647345,'aishwarya_patil@gmail.com');
INSERT INTO DETAILS_EMP1 VALUES (EMP_ID_SEQ.NEXTVAL,'JAY','SHETH','13-FEB-1988','30-JUN-2013',919776453426,'jay_sheth@gmail.com');
INSERT INTO DETAILS_EMP1 VALUES (EMP_ID_SEQ.NEXTVAL,'VERU','KADAM','9-JUN-1990','3-JUN-2014',919675723451,'kveru@gmail.com');
INSERT INTO DETAILS_EMP1 VALUES (EMP_ID_SEQ.NEXTVAL,'NOEL','DSOUZA','27-MAY-1991','7-JUN-2014',919885439086,'dnoel@gmail.com');
INSERT INTO DETAILS_EMP1 VALUES (EMP_ID_SEQ.NEXTVAL,'SHWETA','JADHAV','6-AUG-1992','18-JUN-2015',919178350998,'shweta_jadhav@gmail.com');


-- ASSIGNMENT GIVEN TO THE EMPLOYEE : assignment as in the work given(it should not change)
DROP TABLE EMP_ASSIGN;
DROP SEQUENCE EMP_ASSIGN_ID_SEQ;

CREATE TABLE EMP_ASSIGN
(
ASSIGN_ID NUMBER(3,0) PRIMARY KEY,
EMP_ID NUMBER(2,0),
DEPT_ID NUMBER(2,0),
JOB_ID NUMBER(2,0),
GRADE_ID NUMBER(2,0) ,
LOC_ID NUMBER(2,0),
START_DATE DATE DEFAULT SYSDATE,
END_DATE DATE DEFAULT NULL,
STATUS VARCHAR2(5) DEFAULT 'A',
CONSTRAINT DEPTID_FK FOREIGN KEY (DEPT_ID) REFERENCES S_DEPT(DEPT_ID),
CONSTRAINT JOBID_FK FOREIGN KEY (JOB_ID) REFERENCES S_JOB(JOB_ID),
CONSTRAINT GRADEID_FK FOREIGN KEY (GRADE_ID) REFERENCES S_GRADE(GRADE_ID),
CONSTRAINT LOCID_FK FOREIGN KEY (LOC_ID) REFERENCES S_WORK_LOC(LOC_ID),
CONSTRAINT EMPID_FK FOREIGN KEY (EMP_ID) REFERENCES DETAILS_EMP1(EMP_ID)
);
CREATE SEQUENCE EMP_ASSIGN_ID_SEQ
START WITH 101
INCREMENT BY 1;

INSERT INTO EMP_ASSIGN VALUES (EMP_ASSIGN_ID_SEQ.NEXTVAL,1,1,3,2,1,'22-JUN-2021',NULL,'A');
INSERT INTO EMP_ASSIGN VALUES (EMP_ASSIGN_ID_SEQ.NEXTVAL,2,2,8,4,3,'21-JUN-2021',NULL,'A');
INSERT INTO EMP_ASSIGN VALUES (EMP_ASSIGN_ID_SEQ.NEXTVAL,3,3,1,1,3,'23-JUN-2021',NULL,'A');
INSERT INTO EMP_ASSIGN VALUES (EMP_ASSIGN_ID_SEQ.NEXTVAL,4,4,5,3,2,'20-JUN-2021',NULL,'A');
INSERT INTO EMP_ASSIGN VALUES (EMP_ASSIGN_ID_SEQ.NEXTVAL,5,5,2,1,2,'24-JUN-2021',NULL,'A');

-- it is only valid when employee is already present.
-- ctc is yearly so make it 5 days
CREATE TABLE EMP_COMPEN
(
COMP_ID NUMBER(2,0) PRIMARY KEY,
EMP_ID NUMBER(2,0),
CTC NUMBER(36,0) NOT NULL,
CONSTRAINT EMP_ID_FK FOREIGN KEY (EMP_ID) REFERENCES DETAILS_EMP1(EMP_ID)
);

CREATE SEQUENCE EMP_COMPEN_ID_SEQ
START WITH 10
INCREMENT BY 1;

INSERT INTO EMP_COMPEN VALUES (EMP_COMPEN_ID_SEQ.NEXTVAL,1,20000);
INSERT INTO EMP_COMPEN VALUES (EMP_COMPEN_ID_SEQ.NEXTVAL,2,5000);
INSERT INTO EMP_COMPEN VALUES (EMP_COMPEN_ID_SEQ.NEXTVAL,3,60000);
INSERT INTO EMP_COMPEN VALUES (EMP_COMPEN_ID_SEQ.NEXTVAL,4,20000);
INSERT INTO EMP_COMPEN VALUES (EMP_COMPEN_ID_SEQ.NEXTVAL,5,60000);

DROP TABLE EMP_COMPEN;
DROP SEQUENCE EMP_COMPEN_ID_SEQ;


--------------------------------------------------------------------------------------------------------------------------------
-- payroll processing data
--5 days PAYROLL
-- in case need to check the past 5 days 5 employees
CREATE TABLE EMP_ATTEND
(
ATTEND_ID NUMBER(3,0) PRIMARY KEY,
EMP_ID NUMBER(2,0),
ATTEND_DATE DATE NOT NULL,
ATTEND_MARK VARCHAR2(1) NOT NULL,
CONSTRAINT EMP_ID1_FK FOREIGN KEY (EMP_ID) REFERENCES DETAILS_EMP1(EMP_ID)
);
DROP TABLE EMP_ATTEND;

-- storing the output here in sal_disbursment table
-- PER DAY CTC WILL BE CTC/5
--CREATE TABLE EMP_SAL_DISBURSMENT
--(
--SAL_DISB_ID NUMBER(2,0) PRIMARY KEY,
--EMP_ID NUMBER(2,0),
--NO_OF_DAYS_ATTEND NUMBER(2,0) DEFAULT 0, --1 WEEK - 5 DAYS
--CTC NUMBER(36,0) NOT NULL, -- FOR EG: TOTAL SALARY IS YEARLY (5 DAYS SALARY WILL BE CTC * 5/365)
--START_DATE DATE NOT NULL,
--CONSTRAINT EMP_ID2_FK FOREIGN KEY (EMP_ID) REFERENCES DETAILS_EMP1(EMP_ID)
--);

-- insert 25 entries into the attendence table.
CREATE SEQUENCE EMP_ATTEND_SEQ
START WITH 700
MINVALUE 1
INCREMENT BY 1;
DROP SEQUENCE EMP_ATTEND_SEQ;

INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,1,'5-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,2,'5-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,3,'5-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,4,'5-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,5,'5-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,1,'6-JUL-2021','A');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,2,'6-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,3,'6-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,4,'6-JUL-2021','A');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,5,'6-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,1,'7-JUL-2021','A');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,2,'7-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,3,'7-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,4,'7-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,5,'7-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,1,'8-JUL-2021','A');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,2,'8-JUL-2021','A');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,3,'8-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,4,'8-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,5,'8-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,1,'9-JUL-2021','A');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,2,'9-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,3,'9-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,4,'9-JUL-2021','P');
INSERT INTO EMP_ATTEND VALUES (EMP_ATTEND_SEQ.NEXTVAL,5,'9-JUL-2021','A');

SELECT * FROM EMP_ATTEND;
--------------------------------------------------------------------------------------------------------------------------------
-- FIRST WILL CREATE A CURSOR WHICH IS A JOIN OF EMPLOYEE_DETAILS AND ASSIGNMENT TABLE
-- THE STATUS COLUMN IN ASSIGNMENT TABLE WILL TELL US THE EMPLOYEE IS ACTIVE OR NOT.
-- ONLY ACTIVE EMPLOYEES ARE TO BE CONSIDERED.
-- WE DONT HAVE TO RUN ON INACTIVE EMPLOYEE
DROP TABLE SAL_DISBURSMENT;

CREATE TABLE SAL_DISBURSMENT ( 
SAL_DIS_ID NUMBER(2,0)PRIMARY KEY,
EMP_ID NUMBER(2,0),
NO_OF_DAYS NUMBER(5,0) DEFAULT 0,
CTC NUMBER(36,0),
MONTH_OF_SALARY VARCHAR2(10),
CONSTRAINT EMP_ID_FK2 FOREIGN KEY (EMP_ID) REFERENCES DETAILS_EMP1(EMP_ID)
);

CREATE SEQUENCE SAL_DIS_ID_SEQ
START WITH 1
INCREMENT BY 1;
DROP SEQUENCE SAL_DIS_ID_SEQ;


CREATE or replace PROCEDURE emp_active AS
    CURSOR CURSOR_ACTIVE IS
        SELECT e.emp_id, s.status 
from DETAILS_EMP1 e inner join emp_assign s 
on e.emp_id = s.emp_id
where s.status = 'A';
BEGIN
FOR I IN CURSOR_ACTIVE
LOOP
Insert into SAL_DISBURSMENT values(SAL_DIS_ID_SEQ.NEXTVAL,I.EMP_ID, NULL, NULL, NULL);
dbms_output.put_line(I.EMP_ID||' inserted');
-- WIL BE CHECKING THE ACTIVENESS
END LOOP; -- define cursor body
END;

DROP PROCEDURE EMP_ACTIVE;
EXEC EMP_ACTIVE;

SELECT * FROM SAL_DISBURSMENT;

-- ACTIVE MEMBERS ARE FETCHED.
-- NOW WILL ADD THE NO_OF_DAYS PRESENT FOR THAT EMPLOYEE BY CURSOR

CREATE OR REPLACE PROCEDURE EMP_CHECK AS
CURSOR CURSOR_CHECK IS
    SELECT EMP_ID, ATTEND_MARK , COUNT(*) NO_OF_DAYS
    FROM EMP_ATTEND
    WHERE ATTEND_MARK = 'P' 
    GROUP BY EMP_ID, ATTEND_MARK;
BEGIN
FOR I IN CURSOR_CHECK
LOOP
UPDATE SAL_DISBURSMENT SET no_of_days = I.NO_OF_DAYS  WHERE emp_id = I.EMP_ID;
dbms_output.put_line('EMPLOYEE ID '||I.EMP_ID||' HAS '||I.NO_OF_DAYS ||' DAY ATTENDENCE MARKED AS PRESENT.');
END LOOP;
END;

DROP PROCEDURE EMP_CHECK;
EXEC EMP_CHECK;

SELECT * FROM SAL_DISBURSMENT;
SELECT * FROM EMP_COMPEN;

-- NOW WILL ADD UPDATED CTC INTO THE SALARY_DISB TABLE
CREATE OR REPLACE PROCEDURE EMP_DISB AS
CURSOR CURSOR_DISB IS
SELECT E.EMP_ID, (E.NO_OF_DAYS * C.CTC/5) AS AFTER_DEDUCT_CTC
FROM SAL_DISBURSMENT E  JOIN EMP_COMPEN C
ON E.EMP_ID = C.EMP_ID;
BEGIN
FOR I IN CURSOR_DISB
LOOP
UPDATE SAL_DISBURSMENT SET CTC = I.AFTER_DEDUCT_CTC WHERE EMP_ID = I.EMP_ID;
UPDATE SAL_DISBURSMENT SET MONTH_OF_SALARY = TO_CHAR(SYSDATE, 'MM') WHERE EMP_ID = I.EMP_ID;
dbms_output.put_line(I.AFTER_DEDUCT_CTC);
END LOOP;
END;

DROP PROCEDURE EMP_DISB;
EXEC EMP_DISB;

SELECT * FROM SAL_DISBURSMENT;

--------------------------------------------------------------------------------------------------------------------------------
-- SECOND EXPECTATION:
-- AUTOMATING THE PROCESS
DROP TABLE EMP_STAGING;
CREATE TABLE EMP_STAGING
(
STAGING_ID NUMBER(2,0)PRIMARY KEY,
FIRST_NAME VARCHAR2 (36)NOT NULL,
LAST_NAME VARCHAR2(36) NOT NULL,
DOB DATE,
PHONE_NO NUMBER(12,0),
EMAIL_ID VARCHAR2(36),
DEPT_ID NUMBER(2,0),
JOB_ID NUMBER(2,0),
GRADE_ID NUMBER(2,0),
LOC_ID NUMBER(2,0),
CTC NUMBER(36) NOT NULL,
PROCESSED VARCHAR(36)
);

INSERT INTO EMP_STAGING VALUES (1,'LISA','HEDEN','12-APR-1993',919823451742,'lisa_heden@gmail.com',4,7,4,3,5000,'unprocessed');
INSERT INTO EMP_STAGING VALUES (2,'AMOL','PALEKAR','20-OCT-1996',919453790435,'amol_palekar@gmail.com',2,4,2,1,20000,'unprocessed');

select * from emp_staging;

CREATE OR REPLACE PROCEDURE staging_parameters
(stag_id NUMBER,FN VARCHAR2,LN VARCHAR2, DOB DATE,  PHONE_NO NUMBER,
EMAIL VARCHAR2, DEPID NUMBER, JOBID NUMBER,GRADEID NUMBER,LOCID NUMBER,
CTC NUMBER,PROCESSED VARCHAR2)
IS
EMPLOY_ID NUMBER(2,0);
BEGIN
EMPLOY_ID := EMP_ID_SEQ.NEXTVAL;
IF processed = 'unprocessed' THEN
    INSERT INTO DETAILS_EMP1 VALUES (EMPLOY_ID,FN,LN,DOB,SYSDATE,PHONE_NO,EMAIL);
    INSERT INTO EMP_ASSIGN (ASSIGN_ID, EMP_ID, DEPT_ID, JOB_ID,GRADE_ID,LOC_ID)VALUES (EMP_ASSIGN_ID_SEQ.NEXTVAL,EMPLOY_ID,
    DEPID,JOBID,GRADEID,LOCID);
    INSERT INTO EMP_COMPEN (COMP_ID, EMP_ID, CTC)VALUES (EMP_COMPEN_ID_SEQ.NEXTVAL,EMPLOY_ID,CTC);
    dbms_output.put_line ('INSERTED INTO 3 TABLES...');
    UPDATE EMP_STAGING SET PROCESSED = 'PROCESSED' WHERE STAGING_ID = STAG_ID;
    dbms_output.put_line ('UPDATED TO PROCESSED! ');
END IF;
END;

EXEC staging_parameters(1,'LISA','HEDEN','12-APR-1993',919823451742,'lisa_heden@gmail.com',4,7,4,3,5000,'unprocessed' );
EXEC staging_parameters(2,'AMOL','PALEKAR','20-OCT-1996',919453790435,'amol_palekar@gmail.com',2,4,2,1,20000,'unprocessed');

SELECT * FROM EMP_STAGING;
SELECT * FROM DETAILS_EMP1;
SELECT * FROM EMP_ASSIGN;
SELECT * FROM EMP_COMPEN;



